<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebDriver.Remote</name>
    </assembly>
    <members>
        <member name="T:OpenQA.Selenium.Remote.HttpCommandExecutor">
            <summary>
            Provides a way of executing Commands over HTTP
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.HttpCommandExecutor.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the HttpCommandExecutor class
            </summary>
            <param name="addressOfRemoteServer">Address of the WebDriver Server</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.HttpCommandExecutor.#ctor(System.Uri,System.TimeSpan)">
            <summary>
            Initializes a new instance of the HttpCommandExecutor class
            </summary>
            <param name="addressOfRemoteServer">Address of the WebDriver Server</param>
            <param name="timeout">The timeout within which the server must respond.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.HttpCommandExecutor.Execute(OpenQA.Selenium.Remote.Command)">
            <summary>
            Executes a command
            </summary>
            <param name="commandToExecute">The command you wish to execute</param>
            <returns>A response from the browser</returns>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver">
            <summary>
            Provides a way to use the driver through
            </summary>
            /// <example>
            <code>
            [TestFixture]
            public class Testing
            {
                private IWebDriver driver;
                <para></para>
                [SetUp]
                public void SetUp()
                {
                    driver = new RemoteWebDriver(new Uri("http://127.0.0.1:4444/wd/hub"),DesiredCapabilities.InternetExplorer());
                }
                <para></para>
                [Test]
                public void TestGoogle()
                {
                    driver.Navigate().GoToUrl("http://www.google.co.uk");
                    /*
                    *   Rest of the test
                    */
                }
                <para></para>
                [TearDown]
                public void TearDown()
                {
                    driver.Quit();
                } 
            }
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.#ctor(OpenQA.Selenium.Remote.ICommandExecutor,OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Initializes a new instance of the RemoteWebDriver class
            </summary>
            <param name="commandExecutor">An <see cref="T:OpenQA.Selenium.Remote.ICommandExecutor"/> object which executes commands for the driver.</param>
            <param name="desiredCapabilities">An <see cref="T:OpenQA.Selenium.Remote.ICapabilities"/> object containing the desired capabilities of the browser.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.#ctor(OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Initializes a new instance of the RemoteWebDriver class. This constructor defaults proxy to http://127.0.0.1:4444/wd/hub
            </summary>
            <param name="desiredCapabilities">An <see cref="T:OpenQA.Selenium.Remote.ICapabilities"/> object containing the desired capabilities of the browser.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.#ctor(System.Uri,OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Initializes a new instance of the RemoteWebDriver class
            </summary>
            <param name="remoteAddress">URI containing the address of the WebDriver remote server (e.g. http://127.0.0.1:4444/wd/hub).</param>
            <param name="desiredCapabilities">An <see cref="T:OpenQA.Selenium.Remote.ICapabilities"/> object containing the desired capabilities of the browser.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElement(OpenQA.Selenium.By)">
            <summary>
            Finds the first element in the page that matches the <see cref="T:OpenQA.Selenium.By"/> object
            </summary>
            <param name="by">By mechanism to find the object</param>
            <returns>IWebElement object so that you can interction that object</returns>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            IWebElement elem = driver.FindElement(By.Name("q"));
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElements(OpenQA.Selenium.By)">
            <summary>
            Finds the elements on the page by using the <see cref="T:OpenQA.Selenium.By"/> object and returns a ReadOnlyCollection of the Elements on the page
            </summary>
            <param name="by">By mechanism to find the element</param>
            <returns>ReadOnlyCollection of IWebElement</returns>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            ReadOnlyCollection<![CDATA[<IWebElement>]]> classList = driver.FindElements(By.ClassName("class"));
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Close">
            <summary>
            Closes the Browser
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Quit">
            <summary>
            Close the Browser and Dispose of WebDriver
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Manage">
            <summary>
            Method For getting an object to set the Speen
            </summary>
            <returns>Returns an IOptions object that allows the driver to set the speed and cookies and getting cookies</returns>
            <seealso cref="T:OpenQA.Selenium.IOptions"/>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            driver.Manage().GetCookies();
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Navigate">
            <summary>
            Method to allow you to Navigate with WebDriver
            </summary>
            <returns>Returns an INavigation Object that allows the driver to navigate in the browser</returns>
            <example>
            <code>
                IWebDriver driver = new InternetExplorerDriver();
                driver.Navigate().GoToUrl("http://www.google.co.uk");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.SwitchTo">
            <summary>
            Method to give you access to switch frames and windows
            </summary>
            <returns>Returns an Object that allows you to Switch Frames and Windows</returns>
            <example>
            <code>
            IWebDriver driver = new InternetExplorerDriver();
            driver.SwitchTo().Frame("FrameName");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetWindowHandles">
            <summary>
            Method for returning a collection of WindowHandles that the driver has access to
            </summary>
            <returns>Returns a ReadOnlyCollection of Window Handles</returns>
            <example>
            IWebDriver driver = new InternetExplorerDriver();
            ReadOnlyCollection<![CDATA[<string>]]> windowNames = driver.GetWindowHandles();
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetWindowHandle">
            <summary>
            Returns the Name of Window that the driver is working in
            </summary>
            <returns>Returns the name of the Window</returns>
            <example>
            IWebDriver driver = new InternetExplorerDriver();
            string windowName = driver.GetWindowHandles();
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteScript(System.String,System.Object[])">
            <summary>
            Executes JavaScript in the context of the currently selected frame or window
            </summary>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">The arguments to the script.</param>
            <returns>The value returned by the script.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.ExecuteAsyncScript(System.String,System.Object[])">
            <summary>
            Executes JavaScript asynchronously in the context of the currently selected frame or window.
            </summary>
            <param name="script">The JavaScript code to execute.</param>
            <param name="args">The arguments to the script.</param>
            <returns>The value returned by the script.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the element</param>
            <returns>IWebElement object so that you can interction that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the Element</param>
            <returns>ReadOnlyCollection of Elements that match the object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByClassName(System.String)">
            <summary>
            Finds the first element in the page that matches the CSS Class supplied
            </summary>
            <param name="className">className of the</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByClassName(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="className">CSS class Name on the element</param>
            <returns>ReadOnlyCollection of IWebElement object so that you can interact with those objects</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByLinkText(System.String)">
            <summary>
            Finds the first of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element </param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByLinkText("linktext")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByLinkText(System.String)">
            <summary>
            Finds a list of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element</param>
            <returns>ReadOnlyCollection<![CDATA[<IWebElement>]]> object so that you can interact with those objects</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByPartialLinkText(System.String)">
            <summary>
            Finds the first of elements that match the part of the link text supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByPartialLinkText("partOfLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByPartialLinkText(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>ReadOnlyCollection<![CDATA[<IWebElement>]]> objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByPartialLinkText("partOfTheLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByName(System.String)">
            <summary>
            Finds the first of elements that match the name supplied
            </summary>
            <param name="name">Name of the element on the page</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByName(System.String)">
            <summary>
            Finds a list of elements that match the name supplied
            </summary>
            <param name="name">Name of element</param>
            <returns>ReadOnlyCollect of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByTagName(System.String)">
            <summary>
            Finds the first of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">DOM tag Name of the element being searched</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByTagName(System.String)">
            <summary>
            Finds a list of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">DOM tag Name of element being searched</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByXPath(System.String)">
            <summary>
            Finds the first of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByXPath("//table/tbody/tr/td/a");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByXPath(System.String)">
            <summary>
            Finds a list of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to the element</param>
            <returns>ReadOnlyCollection of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByXpath("//tr/td/a")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementByCssSelector(System.String)">
            <summary>
            Finds the first element matching the specified CSS selector.
            </summary>
            <param name="cssSelector">The CSS selector to match.</param>
            <returns>The first <see cref="T:OpenQA.Selenium.IWebElement"/> matching the criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElementsByCssSelector(System.String)">
            <summary>
            Finds all elements matching the specified CSS selector.
            </summary>
            <param name="cssSelector">The CSS selector to match.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> containing all
            <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> matching the criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Dispose">
            <summary>
            Dispose the RemoteWebDriver Instance
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.InternalExecute(OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes commands with the driver 
            </summary>
            <param name="driverCommandToExecute">Command that needs executing</param>
            <param name="parameters">Parameters needed for the command</param>
            <returns>WebDriver Response</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetElementFromResponse(OpenQA.Selenium.Remote.Response)">
            <summary>
            Find the element in the response
            </summary>
            <param name="response">Reponse from the browser</param>
            <returns>Element from the page</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.GetElementsFromResponse(OpenQA.Selenium.Remote.Response)">
            <summary>
            Finds the elements that are in the response
            </summary>
            <param name="response">Response from the browser</param>
            <returns>Collection of elements</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Dispose(System.Boolean)">
            <summary>
            Stops the client from running
            </summary>
            <param name="disposing">if its in the process of disposing</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.StartSession(OpenQA.Selenium.Remote.ICapabilities)">
            <summary>
            Starts a session with the driver
            </summary>
            <param name="desiredCapabilities">Capabilities of the browser</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.Execute(OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a command with this driver .
            </summary>
            <param name="driverCommandToExecute">A <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/> value representing the command to execute.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing the names and values of the parameters of the command.</param>
            <returns>A <see cref="T:OpenQA.Selenium.Remote.Response"/> containing information about the success or failure of the command and any data returned by the command.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.StartClient">
            <summary>
            Starts the command executor, enabling communication with the browser.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.StopClient">
            <summary>
            Stops the command executor, ending further communication with the browser.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElement(System.String,System.String)">
            <summary>
            Finds an element matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the element.</param>
            <param name="value">The value to use to search for the element.</param>
            <returns>The first <see cref="T:OpenQA.Selenium.IWebElement"/> matching the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.FindElements(System.String,System.String)">
            <summary>
            Finds all elements matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the elements.</param>
            <param name="value">The value to use to search for the elements.</param>
            <returns>A collection of all of the <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> matchings the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.CreateElement(System.String)">
            <summary>
            Creates a <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/> with the specified ID.
            </summary>
            <param name="elementId">The ID of this element.</param>
            <returns>A <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/> with the specified ID.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Url">
            <summary>
            Gets or sets the URL the browser is currently displaying.
            </summary>
            <seealso cref="P:OpenQA.Selenium.IWebDriver.Url"/>
            <seealso cref="M:OpenQA.Selenium.INavigation.GoToUrl(System.String)"/>
            <seealso cref="M:OpenQA.Selenium.INavigation.GoToUrl(System.Uri)"/>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Title">
            <summary>
            Gets the title of the current browser window.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.PageSource">
            <summary>
            Gets the source of the page last loaded by the browser.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Keyboard">
            <summary>
            Gets an <see cref="T:OpenQA.Selenium.IKeyboard"/> object for sending keystrokes to the browser.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Mouse">
            <summary>
            Gets an <see cref="T:OpenQA.Selenium.IMouse"/> object for sending mouse commands to the browser.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.ActionBuilder">
            <summary>
            Gets an <see cref="T:OpenQA.Selenium.Interactions.IActionSequenceBuilder"/> object for building actions to send to the browser.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.Capabilities">
            <summary>
            Gets the capabilities that the RemoteWebDriver instance is currently using
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.IsJavaScriptEnabled">
            <summary>
            Gets a value indicating whether JavaScript is enabled for this browser.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.CommandExecutor">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.Remote.ICommandExecutor"/> which executes commands for this driver.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.SessionId">
            <summary>
            Gets the <see cref="P:OpenQA.Selenium.Remote.RemoteWebDriver.SessionId"/> for the current session of this driver.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions">
            <summary>
            Provides a mechanism for setting options needed for the driver during the test.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteWebDriverOptions class
            </summary>
            <param name="driver">Instance of the driver currently in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.AddCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Method for creating a cookie in the browser
            </summary>
            <param name="cookie"><see cref="T:OpenQA.Selenium.Cookie"/> that represents a cookie in the browser</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.DeleteCookieNamed(System.String)">
            <summary>
            Delete the cookie by passing in the name of the cookie
            </summary>
            <param name="name">The name of the cookie that is in the browser</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.DeleteCookie(OpenQA.Selenium.Cookie)">
            <summary>
            Delete a cookie in the browser by passing in a copy of a cookie
            </summary>
            <param name="cookie">An object that represents a copy of the cookie that needs to be deleted</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.DeleteAllCookies">
            <summary>
            Delete All Cookies that are present in the browser
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.GetCookieNamed(System.String)">
            <summary>
            Method for returning a getting a cookie by name
            </summary>
            <param name="name">name of the cookie that needs to be returned</param>
            <returns>A Cookie from the name</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.GetCookies">
            <summary>
            Method for getting a Collection of Cookies that are present in the browser
            </summary>
            <returns>ReadOnlyCollection of Cookies in the browser</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.Timeouts">
            <summary>
            Provides access to the timeouts defined for this driver.
            </summary>
            <returns>An object implementing the <see cref="T:OpenQA.Selenium.ITimeouts"/> interface.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.Speed">
            <summary>
            Gets or sets the speed with which actions are executed in the browser.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts">
            <summary>
            Defines the interface through which the user can define timeouts.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteTimeouts class
            </summary>
            <param name="driver">The driver that is currently in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts.ImplicitlyWait(System.TimeSpan)">
            <summary>
            Specifies the amount of time the driver should wait when searching for an
            element if it is not immediately present.
            </summary>
            <param name="timeToWait">A <see cref="T:System.TimeSpan"/> structure defining the amount of time to wait.</param>
            <returns>A self reference</returns>
            <remarks>
            When searching for a single element, the driver should poll the page
            until the element has been found, or this timeout expires before throwing
            a <see cref="T:OpenQA.Selenium.NoSuchElementException"/>. When searching for multiple elements,
            the driver should poll the page until at least one element has been found
            or this timeout has expired.
            <para>
            Increasing the implicit wait timeout should be used judiciously as it
            will have an adverse effect on test run time, especially when used with
            slower location strategies like XPath.
            </para>
            </remarks>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteWebDriverOptions.RemoteTimeouts.SetScriptTimeout(System.TimeSpan)">
            <summary>
            Specifies the amount of time the driver should wait when executing JavaScript asynchronously.
            </summary>
            <param name="timeToWait">A <see cref="T:System.TimeSpan"/> structure defining the amount of time to wait.</param>
            <returns>A self reference</returns>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation">
            <summary>
            Provides a mechanism for Navigating with the driver.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteNavigation class
            </summary>
            <param name="driver">Driver in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.Back">
            <summary>
            Move the browser back
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.Forward">
            <summary>
            Move the browser forward
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.GoToUrl(System.String)">
            <summary>
            Navigate to a url for your test
            </summary>
            <param name="url">String of where you want the browser to go to</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.GoToUrl(System.Uri)">
            <summary>
            Navigate to a url for your test
            </summary>
            <param name="url">Uri object of where you want the browser to go to</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteNavigation.Refresh">
            <summary>
            Refresh the browser
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator">
            <summary>
            Provides a mechanism for finding elements on the page with locators.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the RemoteTargetLocator class
            </summary>
            <param name="driver">The driver that is currently in use</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Frame(System.Int32)">
            <summary>
            Move to a different frame using its index
            </summary>
            <param name="frameIndex">The index of the </param>
            <returns>A WebDriver instance that is currently in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Frame(System.String)">
            <summary>
            Move to different frame using its name
            </summary>
            <param name="frameName">name of the frame</param>
            <returns>A WebDriver instance that is currently in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Frame(OpenQA.Selenium.IWebElement)">
            <summary>
            Move to a frame element.
            </summary>
            <param name="frameElement">a previously found FRAME or IFRAME element.</param>
            <returns>A WebDriver instance that is currently in use.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Window(System.String)">
            <summary>
            Change to the Window by passing in the name
            </summary>
            <param name="windowName">name of the window that you wish to move to</param>
            <returns>A WebDriver instance that is currently in use</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.DefaultContent">
            <summary>
            Change the active frame to the default 
            </summary>
            <returns>Element of the default</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.ActiveElement">
            <summary>
            Finds the active element on the page and returns it
            </summary>
            <returns>Element that is active</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.Alert">
            <summary>
            Switches to the currently active modal dialog for this particular driver instance.
            </summary>
            <returns>A handle to the dialog.</returns>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert">
            <summary>
            Defines the interface through which the user can manipulate JavaScript alerts.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> for which the alerts will be managed.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert.Dismiss">
            <summary>
            Dismisses the alert.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert.Accept">
            <summary>
            Accepts the alert.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert.SendKeys(System.String)">
            <summary>
            Sends keys to the alert.
            </summary>
            <param name="keysToSend">The keystrokes to send.</param>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteTargetLocator.RemoteAlert.Text">
            <summary>
            Gets the text of the alert.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteKeyboard">
            <summary>
            Defines the interface through which the user can execute advanced keyboard interactions.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteKeyboard.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteKeyboard"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> for which the keyboard will be managed.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteKeyboard.SendKeys(System.String)">
            <summary>
            Sends a sequence of keystrokes to the target.
            </summary>
            <param name="keySequence">A string representing the keystrokes to send.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteKeyboard.PressKey(System.String)">
            <summary>
            Presses a key.
            </summary>
            <param name="keyToPress">The key value representing the key to press.</param>
            <remarks>The key value must be one of the values from the <see cref="T:OpenQA.Selenium.Keys"/> class.</remarks>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteKeyboard.ReleaseKey(System.String)">
            <summary>
            Releases a key.
            </summary>
            <param name="keyToRelease">The key value representing the key to release.</param>
            <remarks>The key value must be one of the values from the <see cref="T:OpenQA.Selenium.Keys"/> class.</remarks>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse">
            <summary>
            Defines the interface through which the user can execute advanced mouse interactions.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse"/> class.
            </summary>
            <param name="driver">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> for which the mouse will be managed.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.Click(OpenQA.Selenium.Interactions.Internal.ICoordinates)">
            <summary>
            Clicks at a set of coordinates using the primary mouse button.
            </summary>
            <param name="where">An <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to click.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.DoubleClick(OpenQA.Selenium.Interactions.Internal.ICoordinates)">
            <summary>
            Double-clicks at a set of coordinates.
            </summary>
            <param name="where">A <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to double-click.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.MouseDown(OpenQA.Selenium.Interactions.Internal.ICoordinates)">
            <summary>
            Presses the primary mouse button at a set of coordinates.
            </summary>
            <param name="where">A <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to press the mouse button down.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.MouseUp(OpenQA.Selenium.Interactions.Internal.ICoordinates)">
            <summary>
            Releases the primary mouse button at a set of coordinates.
            </summary>
            <param name="where">A <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to release the mouse button.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.MouseMove(OpenQA.Selenium.Interactions.Internal.ICoordinates)">
            <summary>
            Moves the mouse to the specified set of coordinates.
            </summary>
            <param name="where">A <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to move the mouse to.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.MouseMove(OpenQA.Selenium.Interactions.Internal.ICoordinates,System.Int32,System.Int32)">
            <summary>
            Moves the mouse to the specified set of coordinates.
            </summary>
            <param name="where">A <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to click.</param>
            <param name="offsetX">A horizontal offset from the coordinates specified in <paramref name="where"/>.</param>
            <param name="offsetY">A vertical offset from the coordinates specified in <paramref name="where"/>.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebDriver.RemoteMouse.ContextClick(OpenQA.Selenium.Interactions.Internal.ICoordinates)">
            <summary>
            Clicks at a set of coordinates using the secondary mouse button.
            </summary>
            <param name="where">A <see cref="T:OpenQA.Selenium.Interactions.Internal.ICoordinates"/> describing where to click.</param>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RemoteWebElement">
            <summary>
            RemoteWebElement allows you to have access to specific items that are found on the page
            </summary>
            <seealso cref="T:OpenQA.Selenium.IRenderedWebElement"/>
            <seealso cref="T:OpenQA.Selenium.ILocatable"/>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/> class.
            </summary>
            <param name="parentDriver">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> instance hosting this element.</param>
            <param name="id">The ID assigned to the element.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Select">
            <summary>
            Select or unselect element. This operation only applies to input elements such as checkboxes, options in a select and radio buttons.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Clear">
            <summary>
            Method to clear the text out of an Input element
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.SendKeys(System.String)">
            <summary>
            Method for sending native key strokes to the browser
            </summary>
            <param name="text">String containing what you would like to type onto the screen</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Submit">
            <summary>
            If this current element is a form, or an element within a form, then this will be submitted to the remote server. 
            If this causes the current page to change, then this method will block until the new page is loaded.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Click">
            <summary>
            Click this element. If this causes a new page to load, this method will block until the page has loaded. At this point, you should discard all references to this element and any further operations performed on this element 
            will have undefined behaviour unless you know that the element and the page will still be present. If this element is not clickable, then this operation is a no-op since it's pretty common for someone to accidentally miss 
            the target when clicking in Real Life
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.GetAttribute(System.String)">
            <summary>
            If this current element is a form, or an element within a form, then this will be submitted to the remote server. If this causes the current page to change, then this method will block until the new page is loaded.
            </summary>
            <param name="attributeName">Attribute you wish to get details of</param>
            <returns>The attribute's current value or null if the value is not set.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Toggle">
            <summary>
            If the element is a checkbox this will toggle the elements state from selected to not selected, or from not selected to selected
            </summary>
            <returns>Whether the toggled element is selected (true) or not (false) after this toggle is complete</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElements(OpenQA.Selenium.By)">
            <summary>
            Finds the elements on the page by using the <see cref="T:OpenQA.Selenium.By"/> object and returns a ReadOnlyCollection of the Elements on the page
            </summary>
            <param name="by">By mechanism to find the element</param>
            <returns>ReadOnlyCollection of IWebElement</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElement(OpenQA.Selenium.By)">
            <summary>
            Finds the first element in the page that matches the <see cref="T:OpenQA.Selenium.By"/> object
            </summary>
            <param name="by">By mechanism to find the element</param>
            <returns>IWebElement object so that you can interction that object</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByLinkText(System.String)">
            <summary>
            Finds the first of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element </param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementByLinkText("linktext")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByLinkText(System.String)">
            <summary>
            Finds the first of elements that match the link text supplied
            </summary>
            <param name="linkText">Link text of element </param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByLinkText("linktext")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the element</param>
            <returns>IWebElement object so that you can interction that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsById(System.String)">
            <summary>
            Finds the first element in the page that matches the ID supplied
            </summary>
            <param name="id">ID of the Element</param>
            <returns>ReadOnlyCollection of Elements that match the object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsById("id")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByName(System.String)">
            <summary>
            Finds the first of elements that match the name supplied
            </summary>
            <param name="name">Name of the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByName(System.String)">
            <summary>
            Finds a list of elements that match the name supplied
            </summary>
            <param name="name">Name of element</param>
            <returns>ReadOnlyCollect of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByName("name")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByTagName(System.String)">
            <summary>
            Finds the first of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">tag name of the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByTagName(System.String)">
            <summary>
            Finds a list of elements that match the DOM Tag supplied
            </summary>
            <param name="tagName">DOM Tag of the element on the page</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByTagName("tag")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByClassName(System.String)">
            <summary>
            Finds the first element in the page that matches the CSS Class supplied
            </summary>
            <param name="className">className of the</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByClassName(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="className">CSS class name of the elements on the page</param>
            <returns>ReadOnlyCollection of IWebElement object so that you can interact with those objects</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByClassName("classname")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByXPath(System.String)">
            <summary>
            Finds the first of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to the element</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByXPath("//table/tbody/tr/td/a");
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByXPath(System.String)">
            <summary>
            Finds a list of elements that match the XPath supplied
            </summary>
            <param name="xpath">xpath to element on the page</param>
            <returns>ReadOnlyCollection of IWebElement objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByXpath("//tr/td/a")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByPartialLinkText(System.String)">
            <summary>
            Finds the first of elements that match the part of the link text supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>IWebElement object so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            IWebElement elem = driver.FindElementsByPartialLinkText("partOfLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByPartialLinkText(System.String)">
            <summary>
            Finds a list of elements that match the classname supplied
            </summary>
            <param name="partialLinkText">part of the link text</param>
            <returns>ReadOnlyCollection<![CDATA[<IWebElement>]]> objects so that you can interact that object</returns>
            <example>
            <code>
            IWebDriver driver = new RemoteWebDriver(DesiredCapabilities.Firefox());
            ReadOnlyCollection<![CDATA[<IWebElement>]]> elem = driver.FindElementsByPartialLinkText("partOfTheLink")
            </code>
            </example>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementByCssSelector(System.String)">
            <summary>
            Finds the first element matching the specified CSS selector.
            </summary>
            <param name="cssSelector">The id to match.</param>
            <returns>The first <see cref="T:OpenQA.Selenium.IWebElement"/> matching the criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElementsByCssSelector(System.String)">
            <summary>
            Finds all elements matching the specified CSS selector.
            </summary>
            <param name="cssSelector">The CSS selector to match.</param>
            <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1"/> containing all
            <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> matching the criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.GetHashCode">
            <summary>
            Method to get the hash code of the element
            </summary>
            <returns>Interger of the hash code for the element</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Equals(System.Object)">
            <summary>
            Compares if two elements are equal
            </summary>
            <param name="obj">Object to compare against</param>
            <returns>A boolean if it is equal or not</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElement(System.String,System.String)">
            <summary>
            Finds a child element matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the element.</param>
            <param name="value">The value to use to search for the element.</param>
            <returns>The first <see cref="T:OpenQA.Selenium.IWebElement"/> matching the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.FindElements(System.String,System.String)">
            <summary>
            Finds all child elements matching the given mechanism and value.
            </summary>
            <param name="mechanism">The mechanism by which to find the elements.</param>
            <param name="value">The value to use to search for the elements.</param>
            <returns>A collection of all of the <see cref="T:OpenQA.Selenium.IWebElement">IWebElements</see> matchings the given criteria.</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RemoteWebElement.Execute(OpenQA.Selenium.Remote.DriverCommand,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Executes a command on this element using the specified parameters.
            </summary>
            <param name="commandToExecute">The <see cref="T:OpenQA.Selenium.Remote.DriverCommand"/> to execute against this element.</param>
            <param name="parameters">A <see cref="T:System.Collections.Generic.Dictionary`2"/> containing names and values of the parameters for the command.</param>
            <returns>The <see cref="T:OpenQA.Selenium.Remote.Response"/> object containing the result of the command execution.</returns>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.WrappedDriver">
            <summary>
            Gets the <see cref="T:OpenQA.Selenium.IWebDriver"/> used to find this element.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.TagName">
            <summary>
            Gets the DOM Tag of element
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Text">
            <summary>
            Gets the text from the element
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Value">
            <summary>
            Gets the value of the element's "value" attribute. If this value has been modified after the page has loaded (for example, through javascript) then this will reflect the current value of the "value" attribute.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Enabled">
            <summary>
            Gets a value indicating whether an element is currently enabled
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Selected">
            <summary>
            Gets a value indicating whether this element is selected or not. This operation only applies to input elements such as checkboxes, options in a select and radio buttons.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.InternalElementId">
            <summary>
            Gets the ID of the element.
            </summary>
            <remarks>This property is internal to the WebDriver instance, and is
            not intended to be used in your code. The element's ID has no meaning
            outside of internal WebDriver usage, so it would be improper to scope
            it as public. However, both subclasses of <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/>
            and the parent driver hosting the element have a need to access the
            internal element ID. Therefore, we have two properties returning the
            same value, one scoped as internal, the other as protected.</remarks>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RemoteWebElement.Id">
            <summary>
            Gets the ID of the element
            </summary>
            <remarks>This property is internal to the WebDriver instance, and is
            not intended to be used in your code. The element's ID has no meaning
            outside of internal WebDriver usage, so it would be improper to scope
            it as public. However, both subclasses of <see cref="T:OpenQA.Selenium.Remote.RemoteWebElement"/>
            and the parent driver hosting the element have a need to access the
            internal element ID. Therefore, we have two properties returning the
            same value, one scoped as internal, the other as protected.</remarks>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement">
            <summary>
            Provides a mechanism to find Rendered Elements on the page
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.#ctor(OpenQA.Selenium.Remote.RemoteWebDriver,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement"/> class.
            </summary>
            <param name="parent">The <see cref="T:OpenQA.Selenium.Remote.RemoteWebDriver"/> instance hosting this element.</param>
            <param name="id">The ID assigned to the element.</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.GetValueOfCssProperty(System.String)">
            <summary>
            Method to return the value of a CSS Property
            </summary>
            <param name="propertyName">CSS property key</param>
            <returns>string value of the CSS property</returns>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Hover">
            <summary>
            Moves the mouse over the element to do a hover
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.DragAndDropBy(System.Int32,System.Int32)">
            <summary>
            Move to an element, MouseDown on the element and move it by passing in the how many pixels horizontally and vertically you wish to move it
            </summary>
            <param name="moveRightBy">Integer to move it left or right</param>
            <param name="moveDownBy">Integer to move it up or down</param>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.DragAndDropOn(OpenQA.Selenium.IRenderedWebElement)">
            <summary>
            Drag and Drop an element to another element
            </summary>
            <param name="element">Element you wish to drop on</param>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Location">
            <summary>
            Gets the Location of an element and returns a Point object
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Size">
            <summary>
            Gets the <see cref="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Size"/> of the element on the page
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Displayed">
            <summary>
            Gets a value indicating whether the element is currently being displayed
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.LocationOnScreenOnceScrolledIntoView">
            <summary>
            Gets the point of the element once scrolling has completed
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.Coordinates">
            <summary>
            Gets the coordinates identifying the location of this element using
            various frames of reference.
            </summary>
        </member>
        <member name="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates">
            <summary>
            Provides methods specifying the location of the element.
            </summary>
        </member>
        <member name="M:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates.#ctor(OpenQA.Selenium.Remote.RenderedRemoteWebElement)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates"/> class.
            </summary>
            <param name="element">The <see cref="T:OpenQA.Selenium.Remote.RenderedRemoteWebElement"/> used to show the coordinates.</param>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates.LocationOnScreen">
            <summary>
            Gets the location of an element in absolute screen coordinates.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates.LocationInViewport">
            <summary>
            Gets the location of an element relative to the origin of the view port.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates.LocationInDom">
            <summary>
            Gets the location of an element's position within the HTML DOM.
            </summary>
        </member>
        <member name="P:OpenQA.Selenium.Remote.RenderedRemoteWebElement.RemoteCoordinates.AuxiliaryLocator">
            <summary>
            Gets a locator providing a user-defined location for this element, in this case, the internal ID.
            </summary>
        </member>
    </members>
</doc>
